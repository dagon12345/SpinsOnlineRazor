@page
@model SpinsOnlineRazor.Pages.Beneficiaries.IndexModel

@{
    ViewData["Title"] = "Beneficiaries";

}

<h1>Beneficiaries</h1>
<div class="Row" style="display: flex; justify-content: space-between;">
<div class="col-sm-6 ">
<p>
    <a class="btn btn-secondary" asp-page="Create">Create New</a>
</p>
   </div>
<div class="col-sm-6 ">

        <button type="button" class="btn btn-primary" id="btnExport" data-kt-menu-trigger="click" 
        data-kt-menu-placement="bottom-end" style="padding: 9px; margin-left: 78%;"><i class="bi bi-pencil-square"></i> Export Report
      </button>
    </div>
</div>


@*The preceding code uses the <form> tag helper to add the search text box and button.
By default, the <form> tag helper submits form data with a POST.
With POST, the parameters are passed in the HTTP message body and not in the URL.
When HTTP GET is used, the form data is passed in the URL as query strings.
Passing the data with query strings enables users to bookmark the URL.
The W3C guidelines recommend that GET should be used when the action doesn't result in an update.*@

<form asp-page="./Index" method="get">
    <div class="form-actions no-color">
        <p>
            <input type="text" name="SearchString" value="@Model.CurrentFilter" placeholder="Find by Name" />
            <input type="submit" value="Search" class="btn btn-primary" /> |
            <a asp-page="./Index">Back to full list</a>
        </p>
    </div>
</form>

<div class="container">

   <table class="table table-bordered table-striped table-responsive-stack table-dark" style="width:100%;"  id="tableOne">
      <thead class="thead-dark">
         <tr>
              @*Adds hyperlinks to the LastName and Birthdate column headings.
            Uses the information in NameSort and Da teSort to set up hyperlinks with the current sort order values.
            Changes the page heading from Index to Beneficiaries.
            Changes Model.Beneficiary to Model.Beneficiaries.*@
        
            <th>
                @*The column header links use the query string to pass the current search string to the OnGetAsync
                method:*@
                <a asp-page="./Index" asp-route-sortOrder="@Model.NameSort"
                    asp-route-currentFilter="@Model.CurrentFilter">
                    @Html.DisplayNameFor(model => model.Beneficiaries[0].LastName)
                </a>
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Beneficiaries[0].FirstName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Beneficiaries[0].MiddleName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Beneficiaries[0].ExtName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Beneficiaries[0].BirthDate)
            </th>
             <th bgcolor="white">
                 Status
            </th>
            <th>
                 Region
            </th>
            <th>
                Province
            </th>
            <th>
                Municipality
            </th>
            <th>
                Barangay
            </th>
            @*
            <th>
                ID Type
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Beneficiaries[0].IdentificationNumber)
            </th>*@


            @*
            <th>
            <a asp-page="./Index" asp-route-sortOrder="@Model.DateSort">
            @Html.DisplayNameFor(model => model.Beneficiaries[0].Birthdate)
            </a>
            </th>*@
            <th>

            </th>

         </tr>
      </thead>
      <tbody>
         <tr>
             @foreach (var item in Model.Beneficiaries)
        {
            <tr>
             
                <td>
                    @Html.DisplayFor(modelItem => item.LastName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.FirstName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.MiddleName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ExtName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.BirthDate)
                </td>
                 <td>
                    @{
                        foreach (var masterlist in item.Masterlists)
                        {
                            @*@masterlist.ValidationformID @: @validation. <br />*@
                            @Html.DisplayFor(modelItem => masterlist.Status.Name)
                        }
                    }
                </td>
                <td>
                    @{
                        foreach (var masterlist in item.Masterlists)
                        {
                            @*@masterlist.ValidationformID @: @validation. <br />*@
                            @Html.DisplayFor(modelItem => masterlist.Region.Name)

                        }
                    }
                </td>
                <td>
                    @{
                        foreach (var masterlist in item.Masterlists)
                        {
                            @*@masterlist.ValidationformID @: @validation. <br />*@
                            @Html.DisplayFor(modelItem => masterlist.Province.Name)
                        }
                    }
                </td>
                <td>
                    @{
                        foreach (var masterlist in item.Masterlists)
                        {
                            @*@masterlist.ValidationformID @: @validation. <br />*@
                            @Html.DisplayFor(modelItem => masterlist.Municipality.Name)
                        }
                    }
                </td>
                  <td>
                    @{
                        foreach (var masterlist in item.Masterlists)
                        {
                            @*@masterlist.ValidationformID @: @validation. <br />*@
                            @Html.DisplayFor(modelItem => masterlist.Barangay.Name)
                        }
                    }
                </td>
          

                <td>
                    <a class="btn btn-secondary" asp-page="./Edit" asp-route-id="@item.BeneficiaryID"><i class="bi bi-pencil-square"></i></a>
                    <a class="btn btn-info" asp-page="./Details" asp-route-id="@item.BeneficiaryID"><i class="bi bi-view-list"></i></a> 
                    <a class="btn btn-danger" asp-page="./Delete" asp-route-id="@item.BeneficiaryID"><i class="bi bi-trash3-fill"></i></a>
                </td>

                
            </tr>
        }
         </tr>
        
      </tbody>
   </table>
   

@*Paging code for razor below*@

@{
    //An mga button ma disable kung waya nay previous or next page.
    var prevDisabled = !Model.Beneficiaries.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.Beneficiaries.HasNextPage ? "disabled" : "";
}
@*The paging buttons are displayed by tag helpers:*@
<a asp-page="./Index" asp-route-sortOrder="@Model.CurrentSort"
    asp-route-pageIndex="@(Model.Beneficiaries.PageIndex - 1)" asp-route-currentFilter="@Model.CurrentFilter"
    class="btn btn-primary @prevDisabled">
    Previous
</a>
<a asp-page="./Index" asp-route-sortOrder="@Model.CurrentSort"
    asp-route-pageIndex="@(Model.Beneficiaries.PageIndex + 1)" asp-route-currentFilter="@Model.CurrentFilter"
    class="btn btn-primary @nextDisabled">
    Next
</a>

<script src="https://code.jquery.com/jquery-3.6.3.js" integrity="sha256-nQLuAZGRRcILA+6dMBOvcRh5Pe310sBpanc6+QBmyVM=" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/gh/linways/table-to-excel@v1.0.4/dist/tableToExcel.js"></script>
<script>
    $(document).ready(function () {
        $("#btnExport").click(function () {
            let table = document.getElementsByTagName("table");
            console.log(table);
            debugger;
            TableToExcel.convert(table[0], {
                name: `UserManagement.xlsx`,
                sheet: {
                    name: 'Usermanagement'
                }
            });
        });
    });
</script>

